
* boot-UI
  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  ;(toggle-frame-fullscreen)

  #+END_SRC


  #+RESULTS:
  : t
* init
  
  #+BEGIN_SRC emacs-lisp
    (setq save-abbrevs 'silently)

    (setq custom-file "~/.emacs.d/custom.el")
    ;;(load custom-file 'noerror)

    (when (string= system-name "LAP-2013-00026.efsa.eu.int")      
      (setq url-proxy-services
            '(("no_proxy" . "^\\localhost")
              ("http" . "127.0.0.1:3128")
              ("https" . "127.0.0.1:3128"))))
    ;;(add-to-list 'load-path "/usr/share/emacs/26.1/lisp/org/")
    (require 'org)
    (setq org-confirm-babel-evaluate 'nil) 

    (setq safe-local-variable-values '((auto-revert-verbose . nil)))

  #+END_SRC
  
* packages
  #+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
	    (require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

	    (add-to-list 'package-archives
			 '("melpa" . "http://melpa.org/packages/") 
		 
			 t)
	;    (add-to-list 'package-archives
	;                 '("SC" . "http://joseito.republika.pl/sunrise-commander/") t)


    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
	    (package-initialize) 
	    (if (not (package-installed-p 'use-package))
		(progn
		  (package-refresh-contents)
		  (package-install 'use-package)))

	    (eval-when-compile
	      (require 'use-package))


	    (setq use-package-verbose t
		  use-package-always-ensure t
		  ;;use-package-debug t
		  use-package-minimum-reported-time 0.05)

	    (use-package use-package-chords
	      :config (key-chord-mode 1))

	    (use-package diminish)
	    (use-package bind-key)       
	    (add-to-list 'load-path "/usr/share/emacs24/site-lisp/mu4e")

	    (use-package auto-package-update)
	    (auto-package-update-maybe)
  #+END_SRC 

  #+RESULTS:

* exwm
  #+BEGIN_SRC emacs-lisp
        ;;(defvar dropbox-status nil)

        ;;(defun update-dropbox-status ()
        ;;(interactive)
        ;;(setq dropbox-status (car (split-string (shell-command-to-string "dropbox status") "\n"))))
        ;;(run-with-timer 1 (* 1 10) 'update-dropbox-status)

        ;(when (string= system-name "gandalf")) 
        (use-package exwm 
          :disabled t
          :config
          (require 'exwm-config)
          (setq exwm-workspace-number 10)
          (exwm-config-default)

          (exwm-input-set-simulation-keys nil)

          (exwm-input-set-key (kbd "s-l")
                              (lambda () (interactive) (start-process "" nil "slock"))) 
          (exwm-input-set-key (kbd "s-c")
                              (lambda () (interactive) (start-process "" nil "chromium")))
          (exwm-input-set-key (kbd "s-t")
                              (lambda () (interactive) (start-process "" nil "terminator"))) 
          (exwm-input-set-key (kbd "s-m")
                              (lambda () (interactive) (start-process "" nil "chromium-browser" "http://www.efsa.europa.eu/webmail"))) 

          (setq global-mode-string  '("db:" dropbox-status
                                      " "
                                      "[ws:" (:eval (format "%s" exwm-workspace-current-index)) "] " display-time-string))
          (exwm-input-set-key (kbd "s-f") #'exwm-layout-set-fullscreen)      
          (setq exwm-workspace-show-all-buffers t)
          (setq exwm-layout-show-all-buffers t)

          )

(when (string= system-name "carsten-XPS-13-9350")

            (require 'exwm-randr)
            (exwm-randr-enable))

    (defun cb-xrand-desk-2 ()
          "Hello World and you can call it via M-x hello."
          (interactive)
          ;(setq exwm-randr-workspace-output-plist '(0 "eDP-1" 1 "eDP-1" 2 "eDP-1" 3 "eDP-1" 4 "eDP-1" 5 "DP-1" 6 "DP-1" 7 "DP-1" 8 "DP-1" 9 "DP-1"))
          (setq exwm-randr-workspace-output-plist '(0 "eDP-1" 1 "eDP-1" 2 "DP-1" 3 "DP-1"))

          (start-process-shell-command
           "xrandr" nil "xrandr  --fb 3840x1800 --output eDP-1 --mode 3200x1800 --scale 0.6x0.6 --pos 0x0 --output DP-1 --mode 1920x1080 --scale 1x1 --pos 1920x0"

           )
          (exwm-randr-enable)

          )

  #+END_SRC

* comint
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-output-filter-functions #'comint-truncate-buffer)
#+END_SRC
* UI
  #+BEGIN_SRC emacs-lisp 

      (use-package solarized-theme)
      (load-theme 'solarized-light t t)
      (load-theme 'solarized-dark t t)

      (use-package alect-themes)

      (load-theme 'alect-light t t)
      (load-theme 'alect-dark t t)

      (use-package ample-theme)
      (load-theme 'ample t t)
      (load-theme 'ample-light t t)


    ;; (use-package cycle-themes
    ;;   :init 



    ;;   (setq cycle-themes-theme-list
    ;; 	'(solarized-light solarized-dark leuven alect-light alect-dark ample ample-light tango-dark tango material))
    ;;   :config (cycle-themes-mode))

    (use-package powerline
      :config
      (powerline-default-theme))


    (use-package eval-sexp-fu
      ;;       :disabled t                      
      :config
      (turn-on-eval-sexp-fu-flash-mode))

    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (display-time-mode 1)



    (use-package material-theme
      :ensure t
      :config
      (load-theme 'material t t)

      (with-eval-after-load 'font-lock
	(set-face-attribute 'font-lock-constant-face nil :foreground "#C792EA")
	(set-face-attribute 'font-lock-keyword-face nil :foreground "#2BA3FF" :slant 'italic)
	(set-face-attribute 'font-lock-preprocessor-face nil :inherit 'bold :foreground "#2BA3FF" :slant 'italic :weight 'normal)
	(set-face-attribute 'font-lock-string-face nil :foreground "#C3E88D")
	(set-face-attribute 'font-lock-type-face nil :foreground "#FFCB6B")
	(set-face-attribute 'font-lock-variable-name-face nil :foreground "#FF5370"))

      (with-eval-after-load 'em-prompt
	(set-face-attribute 'eshell-prompt nil :foreground "#eeffff"))

      (with-eval-after-load 'faces
	;; From https://gist.github.com/huytd/6b785bdaeb595401d69adc7797e5c22c#file-customized-org-mode-theme-el
	(set-face-attribute 'default nil :stipple nil :background "#212121" :foreground "#eeffff" :inverse-video nil
			    ;; :family "Menlo" ;; or Meslo if unavailable: https://github.com/andreberg/Meslo-Font
			    :family "hack" ;; https://madmalik.github.io/mononoki/ or sudo apt-get install fonts-mononoki
			    :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal
			    :width 'normal :foundry "nil")

	;; Hardcode region theme color.
	(set-face-attribute 'region nil :background "#3f464c" :foreground "#eeeeec" :underline nil)
	(set-face-attribute 'mode-line nil :background "#191919" :box nil)

	;; Styling moody https://github.com/tarsius/moody
	(let ((line (face-attribute 'mode-line :underline)))
	  (set-face-attribute 'mode-line nil :overline   line)
	  (set-face-attribute 'mode-line-inactive nil :overline   line)
	  (set-face-attribute 'mode-line-inactive nil :underline  line)
	  (set-face-attribute 'mode-line nil :box nil)
	  (set-face-attribute 'mode-line-inactive nil :box nil)
	  (set-face-attribute 'mode-line-inactive nil :background "#212121" :foreground "#5B6268")))

      (with-eval-after-load 'org-faces
	(set-face-attribute 'org-table nil :background nil)
	(set-face-attribute 'org-code nil :background nil)
	(set-face-attribute 'org-level-1 nil :background nil :box nil)
	(set-face-attribute 'org-level-2 nil :background nil :box nil)
	(set-face-attribute 'org-level-3 nil :background nil :box nil)
	(set-face-attribute 'org-level-4 nil :background nil :box nil)
	(set-face-attribute 'org-level-5 nil :background nil :box nil)
	(set-face-attribute 'org-level-6 nil :background nil :box nil)
	(set-face-attribute 'org-level-7 nil :background nil :box nil)
	(set-face-attribute 'org-level-8 nil :background nil :box nil)
	(set-face-attribute 'org-block-begin-line nil :background nil :box nil)
	(set-face-attribute 'org-block-end-line nil :background nil :box nil)
	(set-face-attribute 'org-block nil :background nil :box nil))

      (with-eval-after-load 'mu4e-vars
	(set-face-attribute 'mu4e-unread-face nil :inherit 'default :weight 'bold :foreground "#2BA3FF" :underline nil))

      ;; No color for fringe, blends with the rest of the window.
      (with-eval-after-load 'fringe
	(set-face-attribute 'fringe nil
			    :foreground (face-foreground 'default)
			    :background (face-background 'default))))


    (use-package moody
      :ensure t
      :config
      (setq x-underline-at-descent-line t)

      (setq-default mode-line-format
		    '(" "
		      mode-line-front-space
		      mode-line-client
		      mode-line-frame-identification
		      mode-line-buffer-identification " " mode-line-position
		      (vc-mode vc-mode)
		      (multiple-cursors-mode mc/mode-line)
		      " " mode-line-modes
		      mode-line-end-spaces)))

;  (pixel-scroll-mode)
;  (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour.
;  (setq pixel-resolution-fine-flag t) 

  (use-package gruvbox-theme)

  #+END_SRC

  #+RESULTS:
  : t

* Hydra
  #+BEGIN_SRC emacs-lisp

    (use-package hydra
      :config

      (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                            :hint nil)
        "
        Git gutter:
          _j_: next hunk        _s_tage hunk     _q_uit
          _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
          ^ ^                   _p_opup hunk
          _h_: first hunk
          _l_: last hunk        set start _R_evision
        "
        ("j" git-gutter:next-hunk)
        ("k" git-gutter:previous-hunk)
        ("h" (progn (goto-char (point-min))
                    (git-gutter:next-hunk 1)))
        ("l" (progn (goto-char (point-min))
                    (git-gutter:previous-hunk 1)))
        ("s" git-gutter:stage-hunk)
        ("r" git-gutter:revert-hunk)
        ("p" git-gutter:popup-hunk)
        ("R" git-gutter:set-start-revision)
        ("q" nil :color blue)
        ("Q" (progn (git-gutter-mode -1)
                    ;; git-gutter-fringe doesn't seem to
                    ;; clear the markup right away
                    (sit-for 0.1)
                    (git-gutter:clear))
         :color blue))

      (bind-chord "gg" 'hydra-git-gutter/body)

      (defhydra hydra-zoom (global-map "<f6>")
        "zoom"
        ("+" text-scale-increase "in")
        ("-" text-scale-decrease "out"))


      (defhydra hydra-magit (:color teal :hint nil)
        "

                                PROJECTILE: %(projectile-project-root)

                                Immuting            Mutating
                           -----------------------------------------
                             _w_: blame line      _b_: checkout
                             _a_: annotate file   _B_: branch mgr
                             _d_: diff            _c_: commit
                             _s_: status          _e_: rebase
                             _l_: log
                             _t_: time machine

                           "

        ("w" git-messenger:popup-message)
        ("a" vc-annotate)
        ("b" magit-checkout)
        ("B" magit-branch-manager)
        ("c" vc-next-action)
        ("d" magit-diff-working-tree)
        ("e" magit-interactive-rebase)
        ("s" magit-status)
        ("l" magit-log)
        ("t" git-timemachine)))

    (bind-key "C-x g" 'hydra-magit/body)

  #+END_SRC   
* Edit
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "RET") 'newline-and-indent)
    (defun copy-line (arg)
      "Copy lines (as many as prefix argument) in the kill ring.
                                       Ease of use features:
                                       - Move to start of next line.
                                       - Appends the copy on sequential calls.
                                       - Use newline as last char even on the last line of the buffer.
                                       - If region is active, copy its lines."
      (interactive "p")
      (let ((beg (line-beginning-position))
            (end (line-end-position arg)))
        (when mark-active
          (if (> (point) (mark))
              (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
            (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
        (if (eq last-command 'copy-line)
            (kill-append (buffer-substring beg end) (< end beg))
          (kill-ring-save beg end)))
      (kill-append "\n" nil)
      (beginning-of-line (or (and arg (1+ arg)) 2))
      (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

    (defun duplicate-current-line (&optional n)
      "duplicate current line, make more than 1 copy given a numeric argument"
      (interactive "p")
      (save-excursion
        (let ((nb (or n 1))
              (current-line (thing-at-point 'line)))
          ;; when on last line, insert a newline first
          (when (or (= 1 (forward-line 1)) (eq (point) (point-max)))
            (insert "\n"))
          
          ;; now insert as many time as requested
          (while (> n 0)
            (insert current-line)
            (decf n)))))


    (bind-key "C-c k" 'copy-line)
    (bind-key "C-c l" 'duplicate-current-line)
    (bind-key "C-c j" 'join-line)

    (use-package move-text
      :bind (("C-c <up>" . move-text-up)
             ("C-c <down>" . move-text-down)))

    (defun indent-buffer ()
      (interactive)
      (save-excursion
        (indent-region (point-min) (point-max) nil)))

    (defun my/org-cleanup ()
      (interactive)
      (org-edit-special)
      (indent-buffer)
      (org-edit-src-exit))


    (bind-key "<f12>" 'my/org-cleanup)  

    (electric-indent-mode)



    (use-package expand-region
      :chords (("xx" . er/expand-region)))


  #+END_SRC
  
* company
  #+BEGIN_SRC emacs-lisp
  (use-package company 
    :config
  (global-set-key (kbd "M-TAB") #'company-complete) 
    (add-hook 'after-init-hook 'global-company-mode)

    :diminish company-mode)

  (use-package company-statistics
    :config (company-statistics-mode)
    :diminish company-statistics-mode
    )


  (use-package company-quickhelp)


  (define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)
  #+END_SRC
  
* cider
  #+BEGIN_SRC emacs-lisp



  (use-package cider
    :defer f
    :config
    (setq org-edit-src-content-indentation 0
	  org-src-tab-acts-natively t
	  org-src-fontify-natively t
	  org-confirm-babel-evaluate nil
	  org-support-shift-select 'always)
    (setq cider-show-eval-spinner t)
    (setq org-babel-clojure-sync-nrepl-timeout 3600)
					  ;(setq cider-repl-print-length 10)
					  ;(setq cider-repl-print-level 5)


    (defun cider-eval-and-step ()
      (interactive)
      (cider-eval-defun-at-point)
      (sp-next-sexp)
      )


    (defun cider-pr-shorten-string (max)
      (interactive "nShorten strings to ?:  ")
      (insert (format "
			(defn shorten-string [s]
			   (if (> (count s) %d)
			     (str (.substring s 0 %d) \" ...[\" (count s)    \"]\")
			     s))
			(defmethod print-method java.lang.String [v ^java.io.Writer w]  (.write w (shorten-string  v)))"
		      max max)  )

      (cider-repl-return))

    (defun cider-pr-normal-string ()
      (interactive)
      (insert "
			(defmethod print-method java.lang.String [v ^java.io.Writer w]  (.write w v))
			")
      (cider-repl-return))

    ;;(cider-pr-shorten-string 100)
    (defun cider-pr-shorten-string-default ()
      (cider-pr-shorten-string 100)
      )

    ;;      (add-hook 'cider-repl-mode-hook #'cider-pr-shorten-string-default)

    (defun my/truncate-string (string)
      (if (< 10 (length string))
	  (concat (substring string 0 10) " ...["  (number-to-string (length string)) "]"  )
	string))


    (defun my/cider-connect ()
      (interactive)
      (let ((host (read-string "Host: "))
	    (port (read-string "Port: "))
	    (p-dir (read-directory-name "Project dir: "))
	    )
	(cider-connect `(:host ,host 
			       :port ,port 
			       :project-dir ,p-dir)  )
	)
      (cider-enable-on-existing-clojure-buffers)
      )


    ;;(defun cider-select-endpoint ()
    ;;  (cons (read-string "Host: " ) (read-string "Port:") )

    ;;  )


    ;; (defun cider-repl-emit-result (buffer string show-prefix &optional bol)
    ;;   "Emit into BUFFER the result STRING and mark it as an evaluation result.
    ;; If SHOW-PREFIX is non-nil insert `cider-repl-result-prefix' at the beginning
    ;; of the line.  If BOL is non-nil insert at the beginning of the line."
    ;;   (with-current-buffer buffer
    ;; 	(save-excursion
    ;; 	  (cider-save-marker cider-repl-output-start
    ;; 	    (cider-save-marker cider-repl-output-end
    ;; 	      (goto-char cider-repl-input-start-mark)
    ;; 	      (when (and bol (not (bolp)))
    ;; 		(insert-before-markers "\n"))
    ;; 	      (when show-prefix
    ;; 		(insert-before-markers (propertize cider-repl-result-prefix 'font-lock-face 'font-lock-comment-face)))
    ;; 	      (if cider-repl-use-clojure-font-lock
    ;; 		  (insert-before-markers (cider-font-lock-as-clojure (my/truncate-string string)))
    ;; 		(cider-propertize-region
    ;; 		    '(font-lock-face cider-repl-result-face rear-nonsticky (font-lock-face))
    ;; 		  (insert-before-markers (my/truncate-string string)))))))
    ;; 	(cider-repl--show-maximum-output)))



    ;; (defun cider-repl--emit-output-at-pos (buffer string output-face position &optional bol)
    ;;   "Using BUFFER, insert STRING (applying to it OUTPUT-FACE) at POSITION.
    ;; If BOL is non-nil insert at the beginning of line.  Run
    ;; `cider-repl-preoutput-hook' on STRING."
    ;;   (with-current-buffer buffer
    ;; 	(save-excursion
    ;; 	  (cider-save-marker cider-repl-output-start
    ;; 	    (cider-save-marker cider-repl-output-end
    ;; 	      (goto-char position)
    ;; 	      ;; TODO: Review the need for bol
    ;; 	      (when (and bol (not (bolp))) (insert-before-markers "\n"))
    ;; 	      (setq string (propertize (my/truncate-string string)
    ;; 				       'font-lock-face output-face
    ;; 				       'rear-nonsticky '(font-lock-face)))
    ;; 	      (setq string (cider-run-chained-hook 'cider-repl-preoutput-hook string))
    ;; 	      (insert-before-markers  string)
    ;; 	      (cider-repl--flush-ansi-color-context)
    ;; 	      (when (and (= (point) cider-repl-prompt-start-mark)
    ;; 			 (not (bolp)))
    ;; 		(insert-before-markers "\n")
    ;; 		(set-marker cider-repl-output-end (1- (point)))))))
    ;; 	(cider-repl--show-maximum-output)))
    (define-key clojure-mode-map (kbd "<C-return>") #'cider-eval-and-step)
    (define-key cider-mode-map (kbd "M-TAB") #'company-complete)
    (define-key cider-mode-map (kbd "C-c i l") #'cider-inspect-last-sexp)
    (define-key cider-mode-map (kbd "C-c i i") #'cider-inspect)

    )

  (defun my-clojure-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import
    (cljr-add-keybindings-with-prefix "C-c C-m"))

  (use-package clj-refactor
    :defer f
    :config
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import
    (cljr-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'clojure-mode-hook #'my-clojure-mode-hook))

  (use-package cider-eval-sexp-fu
    :defer f
    )



  ;; (use-package sayid
  ;;   :config 
  ;;   (eval-after-load 'clojure-mode
  ;;     '(sayid-setup-package)))

  #+END_SRC

  #+RESULTS:
  
* org-mode 
  #+BEGIN_SRC emacs-lisp
      (use-package org
	:defer t
	:config
	(require 'ox-odt)
	(require 'ob-clojure)

	(setq org-babel-clojure-backend 'cider)
	(require 'cider)
	(setq org-src-fontify-natively t)
	(setq org-src-tab-acts-natively t)
	(setq org-agenda-files (quote ("~/Dropbox/sync/org")))
	(setq org-todo-keywords
	      '((sequence "TODO" "STARTED" "WAITING" "|" "DONE" "CANCELLED" )))

	(setq org-directory "~/Dropbox/sync/org")
	(setq org-default-notes-file (concat org-directory "/notes.org"))
	(setq org-capture-templates
	      '(("t" "Simple todo" entry (file+headline (concat org-directory "/notes.org") "Tasks")
		 "* TODO %?\n")
		("b" "Bookmark" entry (file+headline (concat org-directory "/notes.org") "Bookmarks")
		 "* [[%^{Url}][%^{Title}]]\n\n" :immediate-finish TRUE)
		("e" "email todo" entry (file+headline (concat org-directory "/notes.org")  "Tasks")
		 "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
		))
	(set-variable 'org-export-allow-bind-keywords t)
	(setq org-src-window-setup 'current-window)


	(org-display-inline-images t t)
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '())


	(setq 
	 org-babel-load-languages
	 '((emacs-lisp . t)
	   ;(ipython . t)
	   (R . t)
	   (shell . t)
  	 (python . t)
	   (jupyter . t)
	   ))

	(use-package ox-reveal)
	(defun my/babel-execute-and-next ()
	  (interactive)
	  (org-babel-execute-src-block)
	  (org-babel-next-src-block)
	  )
	(bind-key "C-c b" 'my/babel-execute-and-next org-mode-map)

	(defun my/beamer-to-pdf()

	  (interactive)
	  (org-beamer-export-to-pdf nil t nil nil nil))
	(bind-key "C-c e" 'my/beamer-to-pdf org-mode-map)



	(defun org-dblock-write:rangereport (params)
	  "Display day-by-day time reports."
	  (let* ((ts (plist-get params :tstart))
		 (te (plist-get params :tend))
		 (start (time-to-seconds
			 (apply 'encode-time (org-parse-time-string ts))))
		 (end (time-to-seconds
		       (apply 'encode-time (org-parse-time-string te))))
		 day-numbers)
	    (setq params (plist-put params :tstart nil))
	    (setq params (plist-put params :end nil))
	    (while (<= start end)
	      (save-excursion
		(insert "\n\n"
			(format-time-string (car org-time-stamp-formats)
					    (seconds-to-time start))
			"----------------\n")
		(org-dblock-write:clocktable
		 (plist-put
		  (plist-put
		   params
		   :tstart
		   (format-time-string (car org-time-stamp-formats)
				       (seconds-to-time start)))
		  :tend
		  (format-time-string (car org-time-stamp-formats)
				      (seconds-to-time end))))
		(setq start (+ 86400 start))))))

	(defun my-org-clocktable-indent-string (level)
	  (if (= level 1)
	      ""
	    (let ((str "^"))
	      (while (> level 2)
		(setq level (1- level)
		      str (concat str "--")))
	      (concat str "-> "))))

	(advice-add 'org-clocktable-indent-string :override #'my-org-clocktable-indent-string)
	(setq org-file-apps
	      '(("pdf" . "evince %s")
		("\\.mm\\'" . default)
		("\\.x?html?\\'" . default)))

	:bind (("C-c a"  . org-agenda)
	       ("C-c c" . org-capture)))

      (defun org-babel-remove-all-results ()
	(interactive)
	(org-babel-map-src-blocks nil (org-babel-remove-result))
	) 

      ;; (use-package org2jekyll


      ;;   :config
      ;;   (custom-set-variables '(org2jekyll-blog-author       "ardumont")
      ;;                         '(org2jekyll-source-directory  (expand-file-name "~/Dropbox/sync/org/blog"))
      ;;                         '(org2jekyll-jekyll-directory  (expand-file-name "~/public_html"))
      ;;                         '(org2jekyll-jekyll-drafts-dir "")
      ;;                         '(org2jekyll-jekyll-posts-dir  "_posts/")
      ;;                         '(org-publish-project-alist
      ;;                           `(("default"
      ;;                              :base-directory ,(org2jekyll-input-directory)
      ;;                              :base-extension "org"
      ;;                              ;; :publishing-directory "/ssh:user@host:~/html/notebook/"
      ;;                              :publishing-directory ,(org2jekyll-output-directory)
      ;;                              :publishing-function org-html-publish-to-html
      ;;                              :headline-levels 4
      ;;                              :section-numbers nil
      ;;                              :with-toc nil
      ;;                              :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
      ;;                              :html-preamble t
      ;;                              :recursive t
      ;;                              :make-index t
      ;;                              :html-extension "html"
      ;;                              :body-only t)

      ;;                             ("post"
      ;;                              :base-directory ,(org2jekyll-input-directory)
      ;;                              :base-extension "org"
      ;;                              :publishing-directory ,(org2jekyll-output-directory org2jekyll-jekyll-posts-dir)
      ;;                              :publishing-function org-html-publish-to-html
      ;;                              :headline-levels 4
      ;;                              :section-numbers nil
      ;;                              :with-toc nil
      ;;                              :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
      ;;                              :html-preamble t
      ;;                              :recursive t
      ;;                              :make-index t
      ;;                              :html-extension "html"
      ;;                              :body-only t)

      ;;                             ("images"
      ;;                              :base-directory ,(org2jekyll-input-directory "img")
      ;;                              :base-extension "jpg\\|gif\\|png"
      ;;                              :publishing-directory ,(org2jekyll-output-directory "img")
      ;;                              :publishing-function org-publish-attachment
      ;;                              :recursive t)

      ;;                             ("js"
      ;;                              :base-directory ,(org2jekyll-input-directory "js")
      ;;                              :base-extension "js"
      ;;                              :publishing-directory ,(org2jekyll-output-directory "js")
      ;;                              :publishing-function org-publish-attachment
      ;;                              :recursive t)

      ;;                             ("css"
      ;;                              :base-directory ,(org2jekyll-input-directory "css")
      ;;                              :base-extension "css\\|el"
      ;;                              :publishing-directory ,(org2jekyll-output-directory "css")
      ;;                              :publishing-function org-publish-attachment
      ;;                              :recursive t)

      ;;                             ("web" :components ("images" "js" "css"))))))



  (defun org-babel-execute:graal-r (body params)
    (org-babel-execute:clojure
     (format "(.eval context \"R\" \"%s \" ) "  body) params))


      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
      (add-hook 'org-mode-hook 'org-display-inline-images)   

  (setq org-reveal-note-key-char nil)

  #+END_SRC


* ess
  #+BEGIN_SRC emacs-lisp



  (use-package ess) 
  (require 'ob-R)
  ;; (setq ess-R-font-lock-keywords

  ;;       (quote
  ;;        ((ess-R-fl-keyword:modifiers . t)
  ;; 	(ess-R-fl-keyword:fun-defs . t)
  ;; 	(ess-R-fl-keyword:keywords . t)
  ;; 	(ess-R-fl-keyword:assign-ops . t)
  ;; 	(ess-R-fl-keyword:constants . t)
  ;; 	(ess-fl-keyword:fun-calls . t)
  ;; 	(ess-fl-keyword:numbers . t)
  ;; 	(ess-fl-keyword:operators . t)
  ;; 	(ess-fl-keyword:delimiters . t)
  ;; 	(ess-fl-keyword:= . t)
  ;; 	(ess-R-fl-keyword:F&T . t)
  ;; 	;;  (ess-R-fl-keyword:%op% . t)
  ;; 	))
  ;;       )

  ;; (setq comint-move-point-for-output t)
   (setq ess-help-own-frame nil
	ess-help-reuse-window  t)

  (defun my-ess-execute-screen-options (foo)
    "cycle through windows whose major mode is inferior-ess-mode and fix width"
    (interactive)
    (setq my-windows-list (window-list))
    (while my-windows-list
      (when (with-selected-window (car my-windows-list) (string= "inferior-ess-mode" major-mode))
	(with-selected-window (car my-windows-list) (ess-execute-screen-options t)))
      (setq my-windows-list (cdr my-windows-list))))

  (add-to-list 'window-size-change-functions 'my-ess-execute-screen-options)


  (defun then_R_operator ()
    "R - %>% operator or 'then' pipe operator"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))


  (defun R-docker ()
    (interactive)
    (let ((ess-r-customize-alist
	   (append ess-r-customize-alist
		   '((inferior-ess-program . "~/bin/r-docker.sh"))))
	  (ess-R-readline t))
      (R)))




  #+END_SRC
  
* projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile 
      :config
      (projectile-global-mode)
      (setq projectile-use-git-grep t)
      (setq projectile-file-exists-local-cache-expire (* 5 60)))
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (use-package ag)
  #+END_SRC

* undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :config
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)
      :diminish undo-tree-mode 
      :bind ("C-z" . undo-tree-visualize))
  #+END_SRC

* highlight-tail
  #+BEGIN_SRC emacs-lisp
    ;; (use-package highlight-tail
    ;;   :config
    ;;   (setq highlight-tail-colors '(("black" . 0)
    ;;                                 ("#bc2525" . 25)
    ;;                                 ("black" . 100)))
    ;;   (setq highlight-tail-steps 10
    ;;         highlight-tail-timer 0.05)

    ;;   (highlight-tail-mode)
    ;;   (highlight-tail-reload)
    ;;   :diminish highlight-tail-mode)

  #+END_SRC

* helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm

      :commands(helm-execute-persistent-action helm-select-action)


      :init
      (require 'helm-config)
      (when (executable-find "curl")
        (setq helm-net-prefer-curl t))
      (helm-mode 1)
      (setq helm-autoresize-mode 1)

      (bind-key "<tab>" 'helm-execute-persistent-action helm-map)
      (bind-key "C-i" 'helm-execute-persistent-action helm-map)
      (bind-key "C-z" 'helm-select-action helm-map)
      (global-set-key (kbd "C-c h") 'helm-command-prefix)  

      :diminish helm-mode
      :bind ( 
             ("C-c h g" . helm-google-suggest)
             ("M-x" . helm-M-x)
             ("C-x f" . helm-recentf)
             ("C-x C-f" . helm-find-files)
             ("C-x b"   . helm-mini)
             ("<menu>" . helm-M-x)
             ("C-c h w" . helm-swoop)
             ) 
      )

    (use-package  helm-projectile

      :bind (("C-c p h" . helm-projectile))
      :init
      (setq projectile-switch-project-action 'helm-projectile)
      (helm-projectile-on))

    (use-package helm-recoll
      :init
      (helm-recoll-create-source "default" "~/.recoll"))

    (use-package helm-swoop
      :config
      (setq helm-swoop-split-direction 'split-window-horizontally)
      :bind ("<f8>" . helm-multi-swoop-org))

    (use-package helm-google
      :bind ("C-c C--" . helm-google))
    (use-package helm-ag)
  #+END_SRC
  
* git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :config

      (setq magit-diff-refine-hunk 'all))

    (use-package git-timemachine)

    (use-package git-gutter-fringe
      :config
      (global-git-gutter-mode)
      :diminish git-gutter-mode)


 #+END_SRC
  
* polymode
  #+BEGIN_SRC emacs-lisp

    (use-package polymode
      :config
      (defun insert-r-chunk ()
	(interactive)
	(insert "```{r}

	    ``` ")))

    (use-package poly-R)
    (use-package poly-markdown
      :ensure t)

    (defun ess-rmarkdown ()
      "Compile R markdown (.Rmd). Should work for any output type."
      (interactive)
      (when (bound-and-true-p poly-markdown+r-mode)
	(save-buffer-if-visiting-file)
					    ; Check if attached R-session
	(condition-case nil
	    (ess-get-process)
	  ((error ""  ARGS)
	   (ess-switch-process)))
	(let* ((rmd-buf (current-buffer)))

	  (save-excursion
	    (let* ((sprocess (ess-get-process ess-current-process-name))
		   (sbuffer (process-buffer sprocess))
		   (buf-coding (symbol-name buffer-file-coding-system))
		   (R-cmd
		    (format "library(rmarkdown); rmarkdown::render(\"%s\")"
			    buffer-file-name)))
	      (message "Running rmarkdown on %s" buffer-file-name)
	      (ess-execute R-cmd 'buffer nil nil)
	      (switch-to-buffer rmd-buf)
	      (ess-show-buffer (buffer-name sbuffer) nil))))))


    (bind-key  "C-c C-r"  'ess-rmarkdown  polymode-mode-map)
					    ;      (bind-key  "C-c C-i"  'insert-r-chunk  polymode-mode-map)



    ;;   (eval-when-compile
    ;;     (require 'polymode-core)  
    ;;     (defvar pm/chunkmode))
    ;;   (declare-function pm-map-over-spans "polymode-core")
    ;;   (declare-function pm-narrow-to-span "polymode-core")

    ;;   (defun rmd-send-chunk ()
    ;;     "Send current R chunk to ess process."
    ;;     (interactive)
    ;;     (and (eq (oref pm/chunkmode :mode) 'r-mode) ;;'
    ;;          (pm-with-narrowed-to-span nil
    ;;            (goto-char (point-min))
    ;;            (forward-line)
    ;;            (ess-eval-region (point) (point-max) nil nil 'R)))) ;;'

    ;;   (defun rmd-send-buffer (arg)
    ;;     "Send all R code blocks in buffer to ess process. With prefix
    ;; send regions above point."
    ;;     (interactive "P")
    ;;     (save-restriction
    ;;       (widen)
    ;;       (save-excursion
    ;;         (pm-map-over-spans
    ;;          'rmd-send-chunk (point-min) ;;'
    ;;          ;; adjust this point to send prior regions
    ;;          (if arg (point) (point-max))))))

    ;;   (bind-key "C-c r c" 'rmd-send-chunk)


    ;;   )

    ;; (use-package markdown-mode 
    ;;   :defer 1 
    ;;   :config 
    ;;   (require 'poly-markdown)
    ;;   (require 'poly-R)
    ;;   (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode)))

    ;; (defun save-buffer-if-visiting-file ()
    ;;   "Save the current buffer only if it is visiting a file"
    ;;   (interactive)
    ;;   (if (and (buffer-file-name) (buffer-modified-p))
    ;;       (save-buffer)))




    ;; (defun ess-auto-rmarkdown-enable ()
    ;;   (interactive)
    ;;   (run-with-idle-timer 1 t #'ess-rmarkdown))
  #+END_SRC
  
* password-store
#+BEGIN_SRC emacs-lisp
  (defun password-store-show (entry)
    "show existing password for ENTRY."
    (interactive (list (password-store--completing-read)))
    (with-output-to-temp-buffer "*PW entry*"
      (princ (concat "entry:    " entry "\npassword: " (password-store--run-show entry)))))

  (use-package password-store
    :config
    (bind-key "C-c t c" 'password-store-copy)
    (bind-key "C-c t e" 'password-store-edit)
    (bind-key "C-c t s" 'password-store-show))

#+END_SRC
* Keychord
  #+BEGIN_SRC emacs-lisp

    (use-package key-chord
      :config
      (key-chord-mode 1)
      (bind-chord "uu" 'undo)) 



      ;; (bind-chord "jl"
      ;;             (defhydra join-lines ()
      ;;               ("<up>" join-line)
      ;;               ("<down>" (join-line 1))
      ;;               ("t" join-line)
      ;;               ("n" (join-line 1))
      ;;               ("q" nil :color blue))))




 #+END_SRC 
  
* other
  #+BEGIN_SRC emacs-lisp
  (setq browse-url-generic-program (executable-find "chromium"))
  (setq browse-url-browser-function 'browse-url-generic)

  (use-package focus)

  (use-package google-this
    :config
    (global-set-key (kbd "C-c g") 'google-this-mode-submap))



  (use-package which-key 
    :defer 2
    :config (which-key-mode)
    :diminish  which-key-mode)



  (defun hide-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))

  (defun clear-shell ()
    (interactive)
    (let ((old-max comint-buffer-maximum-size))
      (setq comint-buffer-maximum-size 0)
      (comint-truncate-buffer)
      (setq comint-buffer-maximum-size old-max)))

  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (fset 'yes-or-no-p 'y-or-n-p)

  (use-package calfw
    :defer 1
    :config
    ;;(require 'calfw-org)
    (bind-key "C-c m" 'cfw:open-org-calendar)
    (setq calendar-holidays '()))

  (defun sudo-edit (&optional arg)
    (interactive "P")
    (if (or arg (not buffer-file-name))
	(find-file (concat "/sudo:root@localhost:"
			   (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

  (use-package pandoc-mode
    :defer t
    :config
    (add-hook 'markdown-mode-hook 'pandoc-mode))


  (defun save-all-and-compile ()
    (interactive)
    (save-some-buffers 1)
    (compile compile-command))

  (global-set-key [f5] 'save-all-and-compile)

  (setq skeleton-pair t)


  (use-package sunrise-commander 
    :disabled t
    :defer t)


  (use-package shell-pop
    :bind ("<f9>" . shell-pop))


  (setq linum-format "%4d")
  (require 'linum)
  (defun linum-update-window-scale-fix (win)
    "fix linum for scaled text"
    (set-window-margins win
			(ceiling (* (if (boundp 'text-scale-mode-step)
					(expt text-scale-mode-step
					      text-scale-mode-amount) 1)
				    (if (car (window-margins))
					(car (window-margins)) 1)
				    ))))
  (advice-add #'linum-update-window :after #'linum-update-window-scale-fix)

  (winner-mode) 

  (use-package anzu

    :bind(("M-%" . anzu-query-replace)
	  ("M-C-%" . anzu-query-replace-regexp))
    :config
    (global-anzu-mode 1)
    (set-face-attribute 'anzu-mode-line nil
			:foreground "orange" :weight 'bold))


  ;; (use-package aggressive-indent
  ;;   :disabled t
  ;;   :config
  ;;   (global-aggressive-indent-mode 1)
  ;;   (add-to-list 'aggressive-indent-excluded-modes 'poly-markdown+r-mode)
  ;;   (add-to-list 'aggressive-indent-excluded-modes 'polymode)
  ;;   (add-to-list 'aggressive-indent-excluded-modes 'Polymode)


  ;;   )

  (use-package discover-my-major)
  ;;(use-package yaml-mode)

  (windmove-default-keybindings 'super)


  (use-package dash-functional)
  (defmacro my/convert-shell-scripts-to-interactive-commands (directory)
    "Make the shell scripts in DIRECTORY available as interactive commands."
    (cons 'progn
	  (-map
	   (lambda (filename)
	     (let ((function-name (intern (concat "my/shell/" (file-name-nondirectory filename)))))
	       `(defun ,function-name (&rest args)
		  (interactive)
		  (apply 'call-process ,filename nil nil nil args))))
	   (-filter (-not #'file-directory-p)
		    (-filter #'file-executable-p (directory-files directory t))))))
  (when (file-directory-p "~/bin")
    (my/convert-shell-scripts-to-interactive-commands "~/bin"))

  ;;    (use-package pdf-tools
  ;;      :config
  ;;      (pdf-tools-install))


  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    )
  (use-package dockerfile-mode)


  (use-package skewer-mode)
  (skewer-setup)
  (use-package ac-js2)
  (add-hook 'js2-mode-hook 'ac-js2-mode)

  (defun open-with (arg)
    "Open visited file in default external program.

      With a prefix ARG always prompt for command to use."
    (interactive "P")
    (when buffer-file-name
      (shell-command (concat
		      (cond
		       ((and (not arg) (eq system-type 'darwin)) "open")
		       ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
		       (t (read-shell-command "Open current file with: ")))
		      " "
		      (shell-quote-argument buffer-file-name)))))


  (use-package deft
    :commands (deft)
    :config (setq deft-directory "~/Dropbox/sync/org"
		  deft-extensions '("md" "org")
		  deft-recursive t))
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
      ;(use-package ob-ipython)
    (use-package jupyter)
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia"))
    (use-package pyvenv 
	      ;:defer 1
      :config
					    ;(pyvenv-activate "~/miniconda/envs/dataScience")
      ;(setq
       ;python-shell-interpreter "ipython"
					  ;)
      )

      ;(add-to-list 'company-backends 'company-ob-ipython)

	  ;; (use-package jedi
	  ;;   :defer 1
	  ;;   :config 

	  ;;   (use-package company-jedi)
	  ;;   (defun my/python-mode-hook ()
	  ;;     (jedi-mode)

	  ;;     (add-to-list 'company-backends 'company-jedi))
	  ;;   (setq jedi:complete-on-dot t)
	  ;;   (add-hook 'python-mode-hook 'my/python-mode-hook))


      ;;     (defun python-shell-completion-complete-or-indent ()
      ;;       "Complete or indent depending on the context.
      ;;     If content before pointer is all whitespace, indent.
      ;;     If not try to complete."
      ;;       (interactive)
      ;;       (if (string-match "^[[:space:]]*$"
      ;; 			(buffer-substring (comint-line-beginning-position)
      ;; 					  (point-marker)))
      ;; 	  (indent-for-tab-command)
      ;; 	(company-complete)))
      (defun block-line-end ()
	  (setq indentation (current-indentation))
	  (forward-line)
	  (while (> (current-indentation) indentation)
	    (forward-line))
	  (forward-line -1)
	  (line-end-position))  
      (defun my-python-shell-send-region (&optional beg end)
	  (interactive)
	  (let ((beg (cond (beg beg)
		    ((region-active-p) (region-beginning))
		    (t (line-beginning-position))))
	      (end (cond (end end)
		    ((region-active-p) 
		     (copy-marker (region-end)))
		    (t (block-line-end)))))
	    (python-shell-send-region beg end))
	  (forward-line))

      (eval-after-load "python"
	'(define-key python-mode-map (kbd "C-<return>") 'my-python-shell-send-region))

  #+END_SRC 

* ein   
  #+BEGIN_SRC emacs-lisp
	(use-package ein
;	      :config
;		 (setq ein:use-auto-complete-superpack t)
;		 (defun my/ein-mode-hook ()
;		 	 (company-mode 0)
;		 	 (auto-complete-mode 1))
;		 (add-hook 'ein:notebook-mode-hook 'my/ein-mode-hook)

 ) 
    (require 'popup)
  #+END_SRC

  #+RESULTS:
  : popup

* Dired
  #+BEGIN_SRC emacs-lisp


    (defun xah-dired-sort ()
      "Sort dired dir listing in different ways.
            Prompt for a choice.
            URL `http://ergoemacs.org/emacs/dired_sort.html'
            Version 2015-07-30"
      (interactive)
      (let (ξsort-by ξarg)
        (setq ξsort-by (ido-completing-read "Sort by:" '( "date" "size" "name")))
        (cond
         ((equal ξsort-by "name") (setq ξarg "-Al --si --time-style long-iso --group-directories-first"))
         ((equal ξsort-by "date") (setq ξarg "-Al --si --time-style long-iso -t --group-directories-first"))
         ((equal ξsort-by "size") (setq ξarg "-Al --si --time-style long-iso -S --group-directories-first"))

         (t (error "logic error 09535" )))
        (dired-sort-other ξarg )))


    (use-package dired+ 
      :disabled t
      :config
      (bind-key  "c"  'xah-dired-sort  dired-mode-map)
      (setq dired-dwim-target t)
      (setq dired-recursive-copies (quote always)) ; “always” means no asking
      (setq dired-recursive-deletes (quote top)) ; “top” means ask once
      (diredp-toggle-find-file-reuse-dir 1)

      (set-face-background diredp-dir-priv nil)
      (set-face-background diredp-exec-priv nil)
      (set-face-background diredp-no-priv nil)
      (set-face-background diredp-rare-priv nil)
      (set-face-background diredp-read-priv nil)
      (set-face-background diredp-write-priv nil)
      )

    ;;; Toggle showing dot-files using "."
    ;; (define-minor-mode dired-hide-dotfiles-mode
    ;;   ""
    ;;   :lighter " Hide"
    ;;   :init-value nil
    ;;   (if (not (eq major-mode 'dired-mode))
    ;;       (progn 
    ;;         (error "Doesn't seem to be a Dired buffer")
    ;;         (setq dired-hide-dotfiles-mode nil))
    ;;     (if dired-hide-dotfiles-mode
    ;;         (setq dired-actual-switches "-lh --group-directories-first")
    ;;       (setq dired-actual-switches "-lAh --group-directories-first"))
    ;;     (revert-buffer)))
    ;; (define-key dired-mode-map "." 'dired-hide-dotfiles-mode)
    ;; (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 0)))
    (use-package dired-filter
      :config
      (setq dired-filter-inherit-filter-stack t)
      )
    (use-package dired-quick-sort :ensure t :config (dired-quick-sort-setup)) 
  #+END_SRC 
* smart parents
#+BEGIN_SRC emacs-lisp
(use-package smartparens)
(require 'smartparens-config)
(sp-use-smartparens-bindings)
(smartparens-global-mode)

;  (setq sp-base-key-bindings 'sp)
;  (use-package smartparens-config
 ;   :ensure smartparens
  ;  :init
   ; (progn
;      (smartparens-config)
    ;  (show-smartparens-global-mode t)))

;  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
 ; (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC
* ace
#+BEGIN_SRC emacs-lisp

  (use-package ace-jump-mode
    :chords (("jj" . ace-jump-char-mode)
             ("jk" . ace-jump-word-mode)
             ("jl" . ace-jump-line-mode)))
#+END_SRC

* start server
  #+BEGIN_SRC emacs-lisp
    (server-start)
  #+END_SRC 

* print init time  
#+BEGIN_SRC emacs-lisp 
(setq after-init-time (current-time))
(message "Config successfully loaded in %s" (emacs-init-time))
(set-frame-font "Hack" t t)

#+END_SRC


  




 





